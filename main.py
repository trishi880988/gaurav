import os
import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message
from dotenv import load_dotenv

# .env ‡§´‡§æ‡§á‡§≤ ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡§æ
load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))  # Owner ID ‡§ï‡•ã int ‡§Æ‡•á‡§Ç ‡§ï‡§®‡•ç‡§µ‡§∞‡•ç‡§ü ‡§ï‡§∞‡§®‡§æ

# Default Welcome Message (‡§Ö‡§ó‡§∞ ‡§®‡§Ø‡§æ ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ)
WELCOME_MESSAGE = "üëã Welcome to our bot!\n\nüöÄ Enjoy your time here!"

# ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú
stored_welcome_message = WELCOME_MESSAGE

app = Client("bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

@app.on_message(filters.command("start"))
async def start(client, message: Message):
    user_id = message.from_user.id

    # ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡§æ
    sent_message = await client.send_message(user_id, stored_welcome_message)
    await asyncio.sleep(5)

    # ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§≠‡•á‡§ú‡§®‡§æ
    delete_message = await client.send_message(
        user_id, "‚ö†Ô∏è ‡§á‡§∏ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•ã **‡§´‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡§∞‡§ï‡•á ‡§∏‡•á‡§µ** ‡§ï‡§∞ ‡§≤‡•á‡§Ç, ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø **5 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§Ø‡•á ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ!**"
    )

    await asyncio.sleep(300)  # 5 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡§æ ‡§ü‡§æ‡§á‡§Æ‡§∞
    await delete_message.delete()

@app.on_message(filters.command("setwelcome") & filters.user(OWNER_ID))
async def set_welcome(client, message: Message):
    global stored_welcome_message

    new_message = message.text.replace("/setwelcome ", "", 1)
    
    if new_message:
        stored_welcome_message = new_message
        await message.reply("‚úÖ **Welcome message updated!**")
    else:
        await message.reply("‚ùå **Please provide a new welcome message!**")

if __name__ == "__main__":
    print("üöÄ Bot is running...")
    app.run()
